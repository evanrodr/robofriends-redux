{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card/Card.js","components/CardList/CardList.js","components/Scroll/Scroll.js","components/SearchBox/SearchBox.js","components/ErrorBoundry/ErrorBoundry.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","id","name","email","className","alt","src","CardList","robots","map","user","index","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","placeholder","onChange","ErrorBoundry","state","hasError","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3666bd60.chunk.js","sourcesContent":["import { apiCall } from './api/api'\r\n\r\nimport {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) => fetch(link).then(response => response.json());","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className='tc bg-gold dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' className='br-100 ba bw2 b--none' src={`https://robohash.org/${id}?200x200/`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, index) => {\r\n          return (\r\n            <Card\r\n              key={index}\r\n              id={robots[index].id}\r\n              name={robots[index].name}\r\n              email={robots[index].email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '1px solid none', height: '800px' }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 br-pill ba b--green bg-lightest-blue'\r\n        type=\"search\"\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooooops. That is not good</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nimport CardList from '../components/CardList/CardList';\r\nimport Scroll from '../components/Scroll/Scroll';\r\nimport SearchBox from '../components/SearchBox/SearchBox';\r\nimport ErrorBoundry from '../components/ErrorBoundry/ErrorBoundry'\r\n\r\nimport './App.css'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    if (isPending) {\r\n      return <h1>Loading</h1>\r\n    } else {\r\n      return (\r\n        <div className='tc'>\r\n          <h1 className='f-headline'>RoboFriends</h1>\r\n          <p className='slogan'><strong>Creating our favourite friends!</strong></p>\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload })\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true })\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false })\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from '../src/containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}